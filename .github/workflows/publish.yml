name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for OIDC (Trusted Publishers)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          # For Trusted Publishers (OIDC): Uses GITHUB_TOKEN automatically
          # For NPM_TOKEN: Uncomment NODE_AUTH_TOKEN env var below
          # env:
          #   NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linter
        run: npm run lint
      
      - name: Build package
        run: npm run build
      
      - name: Update version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      
      - name: Update version (release trigger)
        if: github.event_name == 'release'
        run: |
          # Extract version from release tag (remove 'v' prefix if present)
          VERSION=${{ github.event.release.tag_name }}
          if [[ $VERSION == v* ]]; then
            VERSION=${VERSION#v}
          fi
          # Only update if version is different (allow failure if version unchanged)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version || echo "Version already matches, continuing..."
          else
            echo "Version already matches release tag ($VERSION), skipping update"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag (remove 'v' prefix if present)
            VERSION=${{ github.event.release.tag_name }}
            if [[ $VERSION == v* ]]; then
              VERSION=${VERSION#v}
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi
      
      - name: Publish to npm
        run: npm publish
        env:
          # Trusted Publishers (OIDC): GITHUB_TOKEN is used automatically by setup-node
          # For NPM_TOKEN fallback, uncomment below:
          # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes in v${{ steps.version.outputs.version }}
            
            - See commit history for details
            - Published automatically from GitHub Actions
          draft: false
          prerelease: false
